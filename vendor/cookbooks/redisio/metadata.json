{
  "name": "redisio",
  "version": "2.3.0",
  "description": "Installs/Configures redis",
  "long_description": "**Please read the changelog when upgrading from the 1.x series to the 2.x series**\n\n![cookbook version](http://img.shields.io/badge/cookbook%20version-2.3.0-blue.svg)\nDescription\n===========\n\nWebsite:: https://github.com/brianbianco/redisio\n\nInstalls and configures Redis server instances\n\nRequirements\n============\n\nThis cookbook builds redis from source or install it from packages, so it should work on any architecture for the supported distributions.  Init scripts are installed into /etc/init.d/\n\nIt depends on the ulimit cookbook: https://github.com/bmhatfield/chef-ulimit and the build-essentials cookbook: https://github.com/opscode-cookbooks/build-essential\n\n\nPlatforms\n---------\n\n* Debian, Ubuntu\n* CentOS, Red Hat, Fedora, Scientific Linux\n\nTesting\n-------\nThis cookbook is tested with rspec/chefspec and test-kitchen/serverspec.  Run `bundle install` to install required gems.\n\n* rake spec\n* rake integration\n* knife cookbook test redisio -o ../\n* kitchen test\n\nTested on:\n\n* Ubuntu 12.04\n* Debian 6.0.8\n* Fedora 20\n* Centos 6.4\n\nUsage\n=====\n\nThe redisio cookbook contains LWRP for installing, configuring and managing redis and redis_sentinel.\n\nThe install recipe can build, compile and install redis from sources or install from packages. The configure recipe will configure redis and setup service resources.  These resources will be named for the port of the redis server, unless a \"name\" attribute was specified.  Example names would be: service[\"redis6379\"] or service[\"redismaster\"] if the name attribute was \"master\".\n\nThe most common use case for the redisio cookbook is to use the default recipe, followed by the enable recipe.  \n\nAnother common use case is to use the default, and then call the service resources created by it from another cookbook.  \n\nIt is important to note that changing the configuration options of redis does not make them take effect on the next chef run.  Due to how redis works, you cannot reload a configuration without restarting the redis service.  Redis does not offer a reload option, in order to have new options be used redis must be stopped and started.\n\nYou should make sure to set the ulimit for the user you want to run redis as to be higher than the max connections you allow.\n\nThe disable recipe just stops redis and removes it from run levels.\n\nThe cookbook also contains a recipe to allow for the installation of the redis ruby gem.\n\nRedis-sentinel will write configuration and state data back into its configuration file.  This creates obvious problems when that config is managed by chef.  There is an attribute set to true which controls if chef manages the redis-sentinel config.  By default chef will write out this config file and manage it.  If deploying sentenel it is recommened that you set the node[:redisio][:sentinel][:manage_config] to false allowing chef to write out the initial config and then allow redis-sentiniel to manage.  If running sentinel it is only advices to have node[:redisio][:sentinel][:manage_config] = true when you are pushing new changes to the config file as it will create a flapping state between chef and sentinel when sentinel writes out state to the file.\n\nRecipes\n-------\n\n* configure - This recipe is used to configure redis.\n* default - This is used to install the pre-requisites for building redis, and to make the LWRPs available\n* disable - This recipe can be used to disable the redis service and remove it from runlevels\n* enable - This recipe can be used to enable the redis services and add it to runlevels\n* install - This recipe is used to install redis.\n* redis_gem - This recipe can be used to install the redis ruby gem\n* sentinel - This recipe can be used to install and configure sentinel\n* sentinel_enable - This recipe can be used to enable the sentinel service(s)\n\nRole File Examples\n------------------\n\n#### Install redis and setup an instance with default settings on default port, and start the service through a role file #\n\n```ruby\nrun_list *%w[\n  recipe[redisio]\n  recipe[redisio::enable]\n]\n\ndefault_attributes({})\n```\n#### Install redis with packages and setup an instance with default settings on default port, and start the service through a role file #\n\n```ruby\nrun_list *%w[\n  recipe[redisio]\n  recipe[redisio::enable]\n]\n\ndefault_attributes({\n  'redisio' => {\n    package_install: true\n    version:\n  }\n})\n```\n\n#### Install redis, give the instance a name, and use a unix socket #\n\n```ruby\nrun_list *%w[\n  recipe[redisio]\n  recipe[redisio::enable]\n]\n\ndefault_attributes({\n  'redisio' => {\n    'servers' => [\n      {'name' => 'master', 'port' => '6379', 'unixsocket' => '/tmp/redis.sock', 'unixsocketperm' => '755'},\n    ]\n  }\n})\n```\n\n#### Install redis and setup two instances on the same server, on different ports, with one slaved to the other through a role file #\n\n```ruby\nrun_list *%w[\n  recipe[redisio]\n  recipe[redisio::enable]\n]\n\ndefault_attributes({\n  'redisio' => {\n    'servers' => [\n      {'port' => '6379'},\n      {'port' => '6380', 'slaveof' => { 'address' => '127.0.0.1', 'port' => '6379' }}\n    ]\n  }\n})\n```\n\n#### Install redis and setup two instances, on the same server, on different ports, with the default data directory changed to /mnt/redis, and the second instance named#\n\n```ruby\nrun_list *%w[\n  recipe[redisio]\n  recipe[redisio::enable]\n]\n\ndefault_attributes({\n  'redisio' => {\n    'default_settings' => {'datadir' => '/mnt/redis'},\n    'servers' => [{'port' => '6379'}, {'port' => '6380', 'name' => \"MyInstance\"}]\n  }\n})\n```\n\n#### Install redis and setup three instances on the same server, changing the default data directory to /mnt/redis, each instance will use a different backup type, and one instance will use a different data dir #\n\n```ruby\nrun_list *%w[\n  recipe[redisio]\n  recipe[redisio::enable]\n]\n\ndefault_attributes({\n  'redisio' => {\n    'default_settings' => { 'datadir' => '/mnt/redis/'},\n    'servers' => [\n      {'port' => '6379','backuptype' => 'aof'},\n      {'port' => '6380','backuptype' => 'both'},\n      {'port' => '6381','backuptype' => 'rdb', 'datadir' => '/mnt/redis6381'}\n    ]\n  }\n})\n```\n\n#### Install redis 2.4.11 (lower than the default version) and turn safe install off, for the event where redis is already installed.  This will use the default settings.  Keep in mind the redis version will not actually be updated until you restart the service (either through the LWRP or manually). #\n\n```ruby\nrun_list *%w[\n  recipe[redisio]\n  recipe[redisio::enable]\n]\n\ndefault_attributes({\n  'redisio' => {\n    'safe_install' => false,\n    'version'      => '2.4.11'\n  }\n})\n```\n\n#### Install a single redis-sentinel to listen for a master on localhost and default port number\n\n```ruby\nrun_list *%w[\n  recipe[redisio::sentinel]\n  recipe[redisio::sentinel_enable]\n]\n```\n\n\nLWRP Examples\n-------------\n\nInstead of using my provided recipes, you can simply depend on the redisio cookbook in your metadata and use the LWRP's yourself.  I will show a few examples of ways to use the LWRPS, detailed breakdown of options are below\nin the resources/providers section\n\ninstall resource\n----------------\n\nIt is important to note that this call has certain expectations for example, it expects the redis package to be in the format `redis-VERSION.tar.gz'.\n\n```ruby\nredisio_install \"redis-installation\" do\n  version '2.6.9'\n  download_url 'http://redis.googlecode.com/files/redis-2.6.9.tar.gz'\n  safe_install false\n  install_dir '/usr/local/'\nend\n```\n\nconfigure resource\n------------------\n\nThe servers resource expects an array of hashes where each hash is required to contain at a key-value pair of 'port' => '<port numbers>'.\n\n```ruby\nredisio_configure \"redis-servers\" do\n  version '2.6.9'\n  default_settings node['redisio']['default_settings']\n  servers node['redisio']['servers']\n  base_piddir node['redisio']['base_piddir']\nend\n```\n\nsentinel resource\n----------------\n\nThe sentinel resource installs and configures all of your redis_sentinels defined in sentinel_instances\n\nUsing the sentinel resources:\n\n```ruby\nredisio_sentinel \"redis-sentinels\" do\n  sentinel_defaults redis['sentinel_defaults']\n  sentinels sentinel_instances\n  base_piddir redis['base_piddir']\nend\n```\n\nAttributes\n==========\n\nConfiguration options, each option corresponds to the same-named configuration option in the redis configuration file;  default values listed\n\n* `redisio['mirror']` - mirror server with path to download redis package, default is http://download.redis.io/releases/\n* `redisio['base_name']` - the base name of the redis package to be downloaded (the part before the version), default is 'redis-'\n* `redisio['artifact_type']` - the file extension of the package.  currently only .tar.gz and .tgz are supported, default is 'tar.gz'\n* `redisio['version']` - the version number of redis to install (also appended to the `base_name` for downloading), default is '2.8.17'\n* `redisio['safe_install']` - prevents redis from installing itself if another version of redis is installed, default is true\n* `redisio['base_piddir']` - This is the directory that redis pidfile directories and pidfiles will be placed in.  Since redis can run as non root, it needs to have proper\n                           permissions to the directory to create its pid.  Since each instance can run as a different user, these directories will all be nested inside this base one.\n* `redisio['bypass_setup']` - This attribute allows users to prevent the default recipe from calling the install and configure recipes.\n* `redisio['job_control']` - This deteremines what job control type will be used.  Currently supports 'initd' or 'upstart' options.  Defaults to 'initd'.\n\nDefault settings is a hash of default settings to be applied to to ALL instances.  These can be overridden for each individual server in the servers attribute.  If you are going to set logfile to a specific file, make sure to set syslog-enabled to no.\n\n* `redisio['default_settings']` - { 'redis-option' => 'option setting' }\n\nAvailable options and their defaults\n\n```\n'user'                    => 'redis' - the user to own the redis datadir, redis will also run under this user\n'group'                   => 'redis' - the group to own the redis datadir\n'homedir'                 => Home directory of the user. Varies on distribution, check attributes file\n'shell'                   => Users shell. Varies on distribution, check attributes file\n'systemuser'              => true - Sets up the instances user as a system user\n'ulimit'                  => 0 - 0 is a special value causing the ulimit to be maxconnections +32.  Set to nil or false to disable setting ulimits\n'configdir'               => '/etc/redis' - configuration directory\n'name'                    => nil, Allows you to name the server with something other than port.  Useful if you want to use unix sockets\n'address'                 => nil, Can accept a single string or an array. When using an array, the FIRST value will be used by the init script for connecting to redis\n'databases'               => '16',\n'backuptype'              => 'rdb',\n'datadir'                 => '/var/lib/redis',\n'unixoscket'              => nil - The location of the unix socket to use,\n'unixsocketperm'          => nil - The permissions of the unix socket,\n'timeout'                 => '0',\n'keepalive'               => '0',\n'loglevel'                => 'notice',\n'logfile'                 => nil,\n'syslogenabled'           => 'yes',\n'syslogfacility'          => 'local0',\n'shutdown_save'           => false,\n'save'                    => nil, # Defaults to ['900 1','300 10','60 10000'] inside of template.  Needed due to lack of hash subtraction\n'stopwritesonbgsaveerror' => 'yes',\n'slaveof'                 => nil,\n'masterauth'              => nil,\n'slaveservestaledata'     => 'yes',\n'replpingslaveperiod'     => '10',\n'repltimeout'             => '60',\n'requirepass'             => nil,\n'maxclients'              => 10000,\n'maxmemory'               => nil,\n'maxmemorypolicy'         => nil,\n'maxmemorysamples'        => nil,\n'appendfsync'             => 'everysec',\n'noappendfsynconrewrite'  => 'no',\n'aofrewritepercentage'    => '100',\n'aofrewriteminsize'       => '64mb',\n'luatimelimit'            => '5000',\n'slowloglogslowerthan'    => '10000',\n'slowlog-max-len'         => '1024',\n'notifykeyspaceevents'    => '',\n'hashmaxziplistentries'   => '512',\n'hashmaxziplistvalue'     => '64',\n'setmaxintsetentries'     => '512',\n'zsetmaxziplistentries'   => '128',\n'zsetmaxziplistvalue'     => '64',\n'activerehasing'          => 'yes',\n'clientoutputbufferlimit' => [\n  %w(normal 0 0 0),\n  %w(slave 256mb 64mb 60),\n  %w(pubsub 32mb 8mb 60)\n],\n'hz'                         => '10',\n'aofrewriteincrementalfsync' => 'yes',\n'cluster-enabled'            => 'no',\n'cluster-config-file'        => nil, # Defaults to redis instance name inside of template if cluster is enabled.\n'cluster-node-timeout'       => 5,\n'includes'                   => nil\n```\n\n* `redisio['servers']` - An array where each item is a set of key value pairs for redis instance specific settings.  The only required option is 'port'.  These settings will override the options in 'default_settings', if it is left `nil` it will default to `[{'port' => '6379'}]`. If set to `[]` (empty array), no instances will be created.\n\nThe redis_gem recipe  will also allow you to install the redis ruby gem, these are attributes related to that, and are in the redis_gem attributes file.\n\n* `redisio['gem']['name']` - the name of the gem to install, defaults to 'redis'  \n* `redisio['gem']['version']` -  the version of the gem to install.  if it is nil, the latest available version will be installed.\n\nThe sentinel recipe's use their own attribute file.\n\n* `redisio['sentinel_defaults']` - { 'sentinel-option' => 'option setting' }\n\n```\n'user'                    => 'redis',\n'configdir'               => '/etc/redis',\n'sentinel_port'           => 26379,\n'monitor'                 => nil,\n'down-after-milliseconds' => 30000,\n'can-failover'            => 'yes',\n'parallel-syncs'          => 1,\n'failover-timeout'        => 900000,\n'loglevel'                => 'notice',\n'logfile'                 => nil,\n'syslogenabled'           => 'yes',\n'syslogfacility'          => 'local0',\n'quorum_count'            => 2\n```\n\n* `redisio['redisio']['sentinel']['manage_config']` - Should the cookbook manage the redis and redis sentinel config files.  This is best set to false when using redis_sentinel as it will write state into both configuration files.\n\n* `redisio['redisio']['sentinels']` - Array of sentinels to configure on the node. These settings will override the options in 'sentinel_defaults', if it is left `nil` it will default to `[{'port' => '26379', 'name' => 'mycluster', 'master_ip' => '127.0.0.1', 'master_port' => 6379}]`. If set to `[]` (empty array), no instances will be created.\n\n\nResources/Providers\n===================\n\n`service`\n---------\n\nActions:\n\n* `start`\n* `stop`\n* `restart`\n* `enable`\n* `disable`\n\nSimply provide redis<server_name> where server name is the port if you haven't given it a name.\n\n```ruby\nservice \"redis<server_name>\" do\n  action [:start,:stop,:restart,:enable,:disable]\nend\n```\n\n`install`\n--------\n\nActions:\n\n* `run` - perform the install (default)\n* `nothing` - do nothing\n\nAttribute Parameters\n\n* `version` - the version of redis to download / install\n* `download_url` - the URL plus filename of the redis package to install\n* `download_dir` - the directory to store the downloaded package\n* `artifact_type` - the file extension of the package\n* `base_name` - the name of the package minus the extension and version number\n* `safe_install` - a true or false value which determines if a version of redis will be installed if one already exists, defaults to true\n\nThis resource expects the following naming conventions:\n\npackage file should be in the format <base_name><version_number>.<artifact_type>\n\npackage file after extraction should be inside of the directory <base_name><version_number>\n\n```ruby\ninstall \"redis\" do\n  action [:run,:nothing]\nend\n```\n\n`configure`\n--------\n\nActions:\n\n* `run` - perform the configure (default)\n* `nothing` - do nothing\n\nAttribute Parameters\n\n* `version` - the version of redis to download / install\n* `base_piddir` - directory where pid files will be created\n* `user` - the user to run redis as, and to own the redis files\n* `group` - the group to own the redis files\n* `default_settings` - a hash of the default redis server settings\n* `servers` - an array of hashes containing server configurations overrides (port is the only required)\n\n```ruby\nconfigure \"redis\" do\n  action [:run,:nothing]\nend\n```\n\nLicense and Author\n==================\n\nAuthor:: [Brian Bianco](<brian.bianco@gmail.com>)  \nAuthor\\_Website:: http://www.brianbianco.com  \nTwitter:: [@brianwbianco ](http://twitter.com/brianwbianco)  \nIRC:: geekbri on freenode  \n\nCopyright 2013, Brian Bianco\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\n",
  "source_url": "https://github.com/brianbianco/redisio",
  "issues_url": "https://github.com/brianbianco/redisio/issues",
  "maintainer": "Brian Bianco",
  "maintainer_email": "brian.bianco@gmail.com",
  "license": "Apache 2.0",
  "platforms": {
    "debian": ">= 0.0.0",
    "ubuntu": ">= 0.0.0",
    "centos": ">= 0.0.0",
    "redhat": ">= 0.0.0",
    "fedora": ">= 0.0.0",
    "scientific": ">= 0.0.0",
    "suse": ">= 0.0.0",
    "amazon": ">= 0.0.0"
  },
  "dependencies": {
    "ulimit": ">= 0.1.2",
    "build-essential": ">= 0.0.0"
  },
  "recommendations": {
  },
  "suggestions": {
  },
  "conflicting": {
  },
  "providing": {
  },
  "replacing": {
  },
  "attributes": {
  },
  "groupings": {
  },
  "recipes": {
    "redisio::default": "This recipe is used to install the prequisites for building and installing redis, as well as provides the LWRPs",
    "redisio::install": "This recipe is used to install redis",
    "redisio::configure": "This recipe is used to configure redis by creating the configuration files and init scripts",
    "redisio::sentinel": "This recipe is used to configure redis sentinels by creating the configuration files and init scripts",
    "redisio::enable": "This recipe is used to start the redis instances and enable them in the default run levels",
    "redisio::disable": "this recipe is used to stop the redis instances and disable them in the default run levels",
    "redisio::redis_gem": "this recipe will install the redis ruby gem into the system ruby"
  }
}