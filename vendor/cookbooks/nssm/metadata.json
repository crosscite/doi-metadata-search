{
  "name": "nssm",
  "description": "Installs/Configures NSSM",
  "long_description": "# NSSM Cookbook\n\n[![Cookbook Version](http://img.shields.io/cookbook/v/nssm.svg?style=flat-square)][cookbook]\n[![Build Status](http://img.shields.io/travis/dhoer/chef-nssm.svg?style=flat-square)][travis]\n[![GitHub Issues](http://img.shields.io/github/issues/dhoer/chef-nssm.svg?style=flat-square)][github]\n\n[cookbook]: https://supermarket.chef.io/cookbooks/nssm\n[travis]: https://travis-ci.org/dhoer/chef-nssm\n[github]: https://github.com/dhoer/chef-nssm/issues\n\nThis cookbook installs the Non-Sucking Service Manager (http://nssm.cc), and exposes resources to `install`\nand `remove` Windows services.\n\n## Requirements\n\n- Chef 11 or higher\n\n### Platform\n\n- Windows\n\n### Cookbooks\n\n- windows\n\n## Usage\n\nAdd `recipe[nssm]` to run list.\n\n### Quick Start\n\nTo install a Windows service:\n\n```ruby\nnssm 'service name' do\n  program 'C:\\Windows\\System32\\java.exe'\n  args '-jar C:/path/to/my-executable.jar'\n  action :install\nend\n```\n\nTo remove a Windows service:\n\n```ruby\nnssm 'service name' do\n  action :remove\nend\n```\n\n### Using Parameters\n\nA parameter is a hash key representing the same name as the registry entry which controls the associated functionality.\nSo, for example, the following sets the Startup directory, I/O redirection, and File rotation for a service:\n\n```ruby\nnssm 'service name' do\n  program 'C:\\Windows\\System32\\java.exe'\n  args '-jar C:/path/to/my-executable.jar'\n  params(\n    AppDirectory: 'C:/path/to',\n    AppStdout: 'C:/path/to/log/service.log',\n    AppStderr: 'C:/path/to/log/error.log',\n    AppRotateFiles: 1\n  )\n  action :install\nend\n```\n\n### Arguments with Spaces\n\nHaving spaces in `servicename`, `program` and `params` attributes is not a problem, but spaces in an argument is a\ndifferent matter.\n\nWhen dealing with an argument containing spaces, surround it\nwith [3 double quotes](http://stackoverflow.com/a/15262019):\n\n```ruby\nnssm 'service name' do\n  program 'C:\\Program Files\\Java\\jdk1.7.0_67\\bin\\java.exe'\n  args '-jar \"\"\"C:/path/with spaces to/my-executable.jar\"\"\"'\n  action :install\nend\n```\n    \nWhen dealing with arguments requiring\n[interpolation](http://en.wikibooks.org/wiki/Ruby_Programming/Syntax/Literals#Interpolation) and it contains one or\nmore arguments with spaces, then encapsulate the `args` string using `%()` notation and use `\"\"\"` around arguments\nwith spaces:\n\n```ruby\nmy_path_with_spaces = 'C:/path/with spaces to/my-executable.jar'\nnssm 'service name' do\n  program 'C:\\Program Files\\Java\\jdk1.7.0_67\\bin\\java.exe'\n  args %(-jar \"\"\"#{my_path_with_spaces}\"\"\")\n  action :install\nend\n```\n\n### Attributes\n\n- `node['nssm']['src']` - This can either be a URI or a local path to nssm zip.\n- `node['nssm']['sha256']` - SHA-256 checksum of the file. Chef will not download it if the local file matches the\nchecksum.\n\n### Resource/Provider\n\n#### Actions\n\n- `install` - Install a Windows service.\n- `remove` - Remove Windows service.\n\n#### Attribute Parameters\n\n- `servicename` - Name attribute. The name of the Windows service.\n- `program` - The program to be run as a service.\n- `args` - String of arguments for the program. Optional\n- `params` - Hash of key value pairs where key represents associated registry entry. Optional\n- `start` - Start service after installing. Default` -  true\n\n## ChefSpec Matchers\n\nThe NSSM cookbook includes custom [ChefSpec](https://github.com/sethvargo/chefspec) matchers you can use to test your\nown cookbooks that consume Windows cookbook LWRPs.\n\nExample Matcher Usage\n\n```ruby\nexpect(chef_run).to install_nssm('service name').with(\n  :program 'C:\\Windows\\System32\\java.exe'\n  :args '-jar C:/path/to/my-executable.jar'    \n)\n```\n      \nNSSM Cookbook Matchers\n\n- install_nssm(servicename)\n- remove_nssm(servicename)\n\n## Getting Help\n\n- Ask specific questions on [Stack Overflow](http://stackoverflow.com/questions/tagged/chef-nssm).\n- Report bugs and discuss potential features in [Github issues](https://github.com/dhoer/chef-nssm/issues).\n\n## Contributing\n\nPlease refer to [CONTRIBUTING](https://github.com/dhoer/chef-nssm/blob/master/CONTRIBUTING.md).\n\n## License\n\nMIT - see the accompanying [LICENSE](https://github.com/dhoer/chef-nssm/blob/master/LICENSE.md) file for details.\n",
  "maintainer": "Dennis Hoer",
  "maintainer_email": "dennis.hoer@gmail.com",
  "license": "MIT",
  "platforms": {
    "windows": ">= 0.0.0"
  },
  "dependencies": {
    "windows": "~> 1.0"
  },
  "recommendations": {

  },
  "suggestions": {

  },
  "conflicting": {

  },
  "providing": {

  },
  "replacing": {

  },
  "attributes": {

  },
  "groupings": {

  },
  "recipes": {

  },
  "version": "1.2.0",
  "source_url": "",
  "issues_url": ""
}
