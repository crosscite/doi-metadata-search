{"name":"chef-vault","version":"1.3.2","description":"Installs the chef-vault gem and provides chef_vault_item recipe helper","long_description":"chef-vault Cookbook\n===================\n\nThis cookbook is responsible for installing the `chef-vault` gem and\nproviding some helper methods to load encrypted data bags that are in\nThe Vault. It also provides a resource that can be used to store\nsecrets as a Chef Vault item in a recipe.\n\nChef Vault is a library by Nordstrom's infrastructure operations team\nthat helps manage encrypted data bags.\n\n* https://github.com/Nordstrom/chef-vault\n\n## Requirements\n\nThis cookbook should work on any system/platform that is supported by\nChef.\n\nThis cookbook is specifically tested on Ubuntu and CentOS platforms\nusing Test Kitchen. See `.kitchen.yml` for platforms and test suites.\n\nThe helper methods in this cookbook use the Chef Vault v2 API, so the\ndefault version will match `~> 2.2` to ensure a reasonably updated\nversion of the gem is installed.\n\n## Helper Methods\n\nThis cookbook provides a nice helper method for the Chef Recipe DSL so\nyou can write:\n\n    chef_vault_item(\"secrets\", \"dbpassword\")\n\nInstead of:\n\n    ChefVault::Item.load(\"secrets\", \"dbpassword\")\n\nThis has logic in place to fall back to using data bags if the desired item\nisn't encrypted. If the vault item fails to load because of missing vault\nmetadata (a `vaultname_keys` data bag), then `chef_vault_item` will attempt to\nload the specified item as a regular Data Bag Item with\n`Chef::DataBagItem.load`. This is intended to be used only for testing, and\nnot as a fall back to avoid issues loading encrypted items.\n\nThis cookbook also provides a handy wrapper if you are storing multiple\nenvironment settings within your encrypted items. Using this following\nhelper:\n```ruby\nitem = chef_vault_item_for_environment('secrets', 'passwords')\n```\n\nInstead of (or any combination of such expression):\n```ruby\nitem = chef_vault_item('secrets', 'passwords')[node.chef_environment]\n```\n\n## Attributes\n\n* `node['chef-vault']['version']` - Specify a version of the\n  chef-vault gem if required. Default is `~> 2.2`, as that version was\n  used for testing.\n\n## Resources\n\n### chef_vault_secret\n\nThe `chef_vault_secret` resource can be used in recipes to store\nsecrets in Chef Vault items. Where possible and relevant, this\nresource attempts to map behavior and functionality to the `knife\nvault` sub-commands.\n\n#### Actions\n\nThe actions generally map to the `knife vault` sub-commands, with an\nexception that `create` does an update, because the resource enforces\ndeclarative state. To get the `knife vault create` behavior, use\n`create_if_missing`.\n\n* `:create` - *Default action*. Creates the item, or updates it if it\n  already exists.\n* `:create_if_missing` - Calls the `create` action unless it exists.\n* `:delete` - Deletes the item *and* the item's keys (\"id\"_keys).\n\n#### Attributes\n\n* `id` - *Name attribute*. The name of the data bag item.\n* `data_bag` - *Required*. The data bag that contains the item.\n* `admins` - A list of admin users who should have access to the item.\n  Corresponds to the \"admin\" option when using the chef-vault knife\n  plugin. Can be specified as a comma separated string or an array.\n  See examples, below.\n* `clients` - A search query for the nodes' API clients that should\n  have access to the item.\n* `search` - Search query that would match the same used for the\n  clients, gets stored as a field in the item.\n* `raw_data` - The raw data, as a Ruby Hash, that will be stored in\n  the item. See examples, below.\n\nAt least one of `admins` or `clients` should be specified, otherwise\nnothing will have access to the item.\n\n#### Examples\n\nFrom the test cookbook embedded in this repository.\n\n```ruby\nchef_vault_secret 'clean-energy' do\n  data_bag 'green'\n  raw_data({'auth' => 'Forged in a mold'})\n  admins 'hydroelectric'\n  search '*:*'\nend\n```\n\nAssuming that the `green` data bag exists, this will create the\n`clean-energy` item as a ChefVault encrypted item, which also creates\n`clean-energy_keys` that has the list of admins, clients, and the\nshared secrets. For example, the content looks like this in plaintext:\n\n```json\n{\n  \"id\": \"clean-energy\",\n  \"auth\": {\n    \"encrypted_data\": \"y+l7H4okLu4wisryCaIT+7XeAgomcdgFo3v3p6RKWnXvgvimdzjFGMUfdGId\\nq+pP\\n\",\n    \"iv\": \"HLr0uyy9BrieTDmS0TbbmA==\\n\",\n    \"version\": 1,\n    \"cipher\": \"aes-256-cbc\"\n  }\n}\n```\n\nAnd the encrypted data decrypted using the specified client:\n\n```sh\n$ knife vault show green clean-energy -z -u hydroelectric -k clients/hydroelectric.pem\nauth: Forged in a mold\nid:   clean-energy\n```\n\nAnother example, showing multiple admins allowed access to an item\nusing a comma-separated string, or an array:\n\n```ruby\nchef_vault_secret 'root-password' do\n  admins 'jtimberman,paulmooring'\n  data_bag 'secrets'\n  raw_data({'auth' => 'DontUseThisPasswordForRoot'})\n  search '*:*'\nend\nchef_vault_secret 'root-password' do\n  admins ['jtimberman', 'paulmooring']\n  data_bag 'secrets'\n  raw_data({'auth' => 'DontUseThisPasswordForRoot'})\n  search '*:*'\nend\n```\n\nInternally, the provider will convert the admins array to a\ncomma-delimited string.\n\nWhen using the `chef_vault_secret` resource, the `data_bag` must exist\nfirst. If it doesn't, you can create it in your recipe with a\n`ruby_block`:\n\n```ruby\nbegin\n  data_bag('secrets')\nrescue\n  ruby_block \"create-data_bag-secrets\" do\n    block do\n      Chef::DataBag.validate_name!('secrets')\n      databag = Chef::DataBag.new\n      databag.name('secrets')\n      databag.save\n    end\n    action :create\n  end\nend\n```\n\nOr, use the `cheffish` gem, which provides resources for Chef objects\n(nodes, roles, data bags, etc):\n\n```ruby\nchef_data_bag 'secrets'\n```\n\nNote that there is a bug in versions of cheffish prior to 0.5.beta.3.\nAlso, cheffish requires the `openssl-pkcs8` gem, which has C\nextensions, so openssl development headers and C build tools need to\nbe installed. To use this, you can create a recipe like the one in\nthe [test cookbook](test/fixtures/cookbooks/test/recipes/chef_vault_secret.rb).\n\n## Usage\n\nInclude the recipe before using the Chef Vault library in recipes.\n\n    include_recipe 'chef-vault'\n    secret_stuff = ChefVault::Item.load(\"secrets\", \"a_secret\")\n\nOr, use the helper library method:\n\n    secret_stuff = chef_vault_item(\"secrets\", \"a_secret\")\n\nIf you need a specific version of the `chef-vault` RubyGem, then\nspecify it with the attribute, `node['chef-vault']['version']`.\n\nTo use the `chef_vault_secret` resource in your cookbooks' recipes,\ndeclare a dependency on this cookbook, and then use the resource as\ndescribed in the Examples above.\n\n## Contributing\n\nThis repository contains a `CONTRIBUTING` file that describes the\ncontribution process for Chef cookbooks.\n\n## License and Authors\n\n- Author: Joshua Timberman <joshua@chef.io>\n- Copyright (c) 2013 Opscode, Inc. <legal@opscode.com>\n- Copyright (c) 2014-2015 Chef Software, Inc. <legal@chef.io>\n- Copyright (c) 2014, 2015 Bloomberg Finance L.P.\n\nLicense:: Apache License, Version 2.0\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n","maintainer":"Chef Software, Inc.","maintainer_email":"cookbooks@chef.io","license":"Apache 2.0","platforms":{},"dependencies":{},"recommendations":{},"suggestions":{},"conflicting":{},"providing":{},"replacing":{},"attributes":{},"groupings":{},"recipes":{}}