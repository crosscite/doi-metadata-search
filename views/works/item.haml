- attributes = item.fetch("attributes", {})
- type = attributes.fetch("resource-type-id", nil)
- includes = @works.present? ? @works[:included] : @work[:included]
- work_types = includes.select { |item| item["type"] == "work-types" }
- sources = @works.present? ? @works[:meta].fetch("sources", []) : []
- new_params = params[:model] == "works" && params["id"] == attributes.fetch("doi", nil) ? params.merge(external_link: true) : params
- title = attributes["title"].to_s.gsub(/"/, '\"')
- views = metrics.to_h.fetch("unique-dataset-investigations-regular","--")
- total_views = metrics.to_h.fetch("total-dataset-investigations-regular","--")
- downloads =  metrics.to_h.fetch("unique-dataset-requests-regular","--")
- total_downloads = metrics.to_h.fetch("total-dataset-requests-regular","--")
- resolutions =  metrics.to_h.fetch("unique-resolutions-regular",0).to_i + metrics.to_h.fetch("unique-resolutions-machine","--").to_i
- citations =  metrics.to_h.fetch("references",0).to_i + metrics.to_h.fetch("cites","--").to_i
- if @work.present? && metrics.any? && ENV['RACK_ENV'] != "production"
  - gon.chart_views =  chart.select{|hash| hash["id"] == "unique-dataset-investigations-regular" }[0].fetch("yearMonths",[])
  - gon.chart_downloads =  chart.select{|hash| hash["id"] == "unique-dataset-requests-regular" }[0].fetch("yearMonths",[])

.panel.panel-default
  .panel-body
    %h3.work
      %a{:id => "title-link", :href => works_action(item, new_params), :title => "Go to landing page"}
        = attributes["title"]
    - if attributes["author"].present?
      = author_format(attributes["author"])
    .metadata
      = metadata_format(attributes, work_types: work_types)
    - if attributes["description"].present?
      .description
        = description_format(attributes["description"])
    - if attributes["license"].present?
      .license
        %a{:href => attributes["license"]}
          = license_img(attributes["license"])

  - if ENV['RACK_ENV'] != "production"
    - if type == "dataset"
      .panel-footer
        %a.usage-counts.usage-views{:href => works_action(item,{})}
          .fa.fa-eye
          = "#{views} Views"
        %a.usage-counts.usage-downloads{:href => works_action(item,{})}
          .fa.fa-download            
          = "#{downloads} Downloads"
        - unless metrics.any?
          %span.usage-info{:title => "This data center is not currently submitting usage information."}
            .fa.fa-info-circle   
      -# %span.usage-counts
      -#   .fa.fa-bolt
      -#   = "#{resolutions} Resolutions"
      -# %span.usage-counts
      -#   .fa.fa-thumbs-o-up.usage-citations
      -#   = "#{citations} Citations"

  - if @work.present? && @work.fetch(:data, {}).fetch("attributes", {}).fetch("related-identifiers", nil).present? && @work.fetch(:data, {}).fetch("id", "work") != item["id"]
    .panel-footer
      = relation_type_title(@work.fetch(:data, {}).fetch("attributes", {}).fetch("related-identifiers"), item["id"]) + " " + @work.fetch(:data, {}).fetch("id", nil)

  .panel-footer.item-links
    %a{:id => "doi-link", :href => item["id"], :title => "Go to landing page"}
      %i.fa.fa-external-link
      = item["id"]
    - if attributes["doi"].present?
      %a.cite-link.nowrap{href: '#', onclick: "showCiteBox(\"#{attributes["doi"]}\", \"#{title}\"); return false;"}
        %i.fa.fa-quote-left
        Cite

    - if user_signed_in? && attributes["member-id"].to_i == 0
      = haml :'works/claim', locals: { item: item }

- if type == "dataset" && @work.present?
  - if metrics.any? && ENV['RACK_ENV'] != "production"
    .panel.panel-default
      .panel-body.usage-charts
        = haml :'works/visualisation', locals: { attributes: attributes, views: views, downloads: downloads, total_views: total_views, total_downloads: total_downloads}
  - else
    .panel.panel-default
      .panel-body
        = "This data center is not currently submitting usage information. For information on how your repository can submit usage information, please see"
        %a{href: 'https://support.datacite.org/docs/usage-reports-api-guide'}
          our Documentation.
