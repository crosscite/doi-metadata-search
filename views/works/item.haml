- attributes = item.fetch("attributes", {})
- type = attributes.fetch("resource-type-id", nil)
- includes = @works.present? ? @works[:included] : @work[:included]
- work_types = includes.select { |item| item["type"] == "work-types" }
- sources = @works.present? ? @works[:meta].fetch("sources", []) : []
- new_params = params[:model] == "works" && params["id"] == attributes.fetch("doi", nil) ? params.merge(external_link: true) : params
- title = attributes["title"].to_s.gsub(/"/, '\"')
- views = metrics.to_h.fetch("unique-dataset-investigations-regular",0) 
-# - views =  metrics.fetch(:views_histogram,{}).fetch("count",0).to_i 
- total_views = metrics.to_h.fetch("total-dataset-investigations-regular",0) 
- downloads = metrics.to_h.fetch("unique-dataset-requests-regular",0) 
-# - downloads =  metrics.fetch(:downloads_histogram,{}).fetch("count",0).to_i 
- total_downloads = metrics.to_h.fetch("total-dataset-requests-regular",0) 
- resolutions = metrics.to_h.fetch("unique-resolutions-regular",0).to_i + metrics.to_h.fetch("unique-resolutions-machine","--").to_i
-# - citations = filter_relation_types metrics ###metrics.fetch("uniqueCitations",0).to_i
- citations = metrics.fetch(:citations,{}).fetch("citations",0).to_i 
- if @work.present? && metrics.fetch(:views_histogram,{}).fetch("yearMonths",[]).any?
  - gon.chart_views = metrics.fetch(:views_histogram,{}).fetch("yearMonths",[])
  - gon.yop = attributes.fetch("published", "").to_i
- if @work.present? && metrics.fetch(:downloads_histogram,{}).fetch("yearMonths",[]).any?
  - gon.chart_downloads = metrics.fetch(:downloads_histogram,{}).fetch("yearMonths",[])
  - gon.yop = attributes.fetch("published", "").to_i
- if @work.present? && citations.positive?
  - has_duplicated = citations != metrics.fetch(:citations_histogram,{}).fetch("count",0) ? true : false
  - citations_chart = remove_duplicated_counts(citations,metrics.fetch(:citations_histogram,{}), attributes.fetch("published", "").to_i )
  - gon.chart_citations = citations_chart.fetch("years",[])
  - gon.yop = attributes.fetch("published", "").to_i
- if ENV['RACK_ENV'] == 'production' ### TODO: Remove soon. set temporaly to send to production 
  - citations = 0 ### TODO: Remove soon. set temporaly to send to production 
- widget_data = "{\"views\":#{views}, \"downloads\":#{downloads}, \"citations\":#{citations}}"

.panel.panel-default
  .panel-body
    %h3.work
      %a{:id => "title-link", :href => works_action(item, new_params), :title => "Go to landing page"}
        = attributes["title"]
    - if attributes["author"].present?
      = author_format(attributes["author"])
    .metadata
      = metadata_format(attributes, work_types: work_types)
    - if attributes["description"].present?
      .description
        = description_format(attributes["description"])
    - if attributes["license"].present?
      .license
        %a{:href => attributes["license"]}
          = license_img(attributes["license"])

  - if ((views+downloads+citations).positive?)
    .panel-footer{:style=>"display: grid;text-align: left;grid-template-columns: 400px max-content 200px;"}
      - if ENV['RACK_ENV'] == 'production' ### TODO: Remove soon. set temporaly to send to production 
        %data-metrics-badge{"data-input": widget_data, doi:attributes["doi"],  display:"datacite"}
      -else
        %data-metrics-badge{doi:attributes["doi"],  display:"datacite"}
      - if ((views+downloads).zero? && @work.blank?)
        %div.col-md-auto
          %span.usage-info
            .fa.fa-info-circle 
          %a
            = "<small> This data center is not currently reporting usage information.</small> "
  - else
    - unless (@work.present?)
      .panel-footer
        %span.usage-info
          .fa.fa-info-circle 
        %a
          = "This data center is not currently reporting usage information." 

  - if @work.present? && @work.fetch(:data, {}).fetch("attributes", {}).fetch("related-identifiers", nil).present? && @work.fetch(:data, {}).fetch("id", "work") != item["id"]
    .panel-footer
      = relation_type_title(@work.fetch(:data, {}).fetch("attributes", {}).fetch("related-identifiers"), item["id"]) + " " + @work.fetch(:data, {}).fetch("id", nil)

  .panel-footer.item-links
    %a{:id => "doi-link", :href => item["id"], :title => "Go to landing page"}
      %i.fa.fa-external-link
      = item["id"]
    - if attributes["doi"].present?
      %a.cite-link.nowrap{href: '#', onclick: "showCiteBox(\"#{attributes["doi"]}\", \"#{title}\"); return false;"}
        %i.fa.fa-quote-left
        Cite

    - if user_signed_in? && is_person?
      = haml :'works/claim', locals: { item: item }

- if @work.present? 
  - if ((views+downloads+citations).positive?)
    = haml :'works/visualisation', locals: { attributes: attributes, views: views, downloads: downloads, citations: citations, total_views: total_views, total_downloads: total_downloads}
  - if ((views+downloads).zero?)
    .panel-body.alert.alert-warning
      = "This data center is not currently reporting usage information. For information on how your repository can submit usage information, please see"
      %a{href: 'https://support.datacite.org/docs/views-and-downloads'}
        our documentation.
- if ENV['RACK_ENV'] != 'production'
  - if @work.present? 
    - if citations.positive?
      = haml :'citations/list', locals: { attributes: attributes, citations: citations, duplicated: has_duplicated ,summary: metrics}
    - else
      .panel-body.alert.alert-warning
        = "We found no citations for this #{type}. For information on how to provide citation information, please see"
        %a{href: 'https://support.datacite.org/docs/contributing-data-citations'}
          our documentation. 
